diff -Naur acse_1.1.0/acse/Acse.lex acse_1.1.0_cond/acse/Acse.lex
--- acse_1.1.0/acse/Acse.lex	2008-11-21 12:47:02.000000000 +0100
+++ acse_1.1.0_cond/acse/Acse.lex	2014-09-15 22:02:15.000000000 +0200
@@ -98,6 +98,9 @@
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"cond"            { return COND; } 
+"case"            { return CASE; } 
+"default"         { return DEFAULT; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff -Naur acse_1.1.0/acse/Acse.y acse_1.1.0_cond/acse/Acse.y
--- acse_1.1.0/acse/Acse.y	2008-12-23 17:02:28.000000000 +0100
+++ acse_1.1.0_cond/acse/Acse.y	2014-09-15 23:15:22.000000000 +0200
@@ -90,6 +90,9 @@
 
 t_io_infos *file_infos;    /* input and output files used by the compiler */
 
+t_list *condStack = NULL;
+
+
 %}
 
 %expect 1
@@ -106,6 +109,7 @@
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
+   t_cond_statement *cond_stmt; 
 } 
 /*=========================================================================
                                TOKENS 
@@ -131,6 +135,10 @@
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
 
+%token <cond_stmt> COND
+%token DEFAULT
+%token CASE
+
 %type <expr> exp
 %type <decl> declaration
 %type <list> declaration_list
@@ -251,6 +259,7 @@
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+					  | cond_statement             { /* does nothing */ }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -408,6 +417,59 @@
                      }
 ;
 
+
+cond_statement: COND LBRACE {
+		     // Lo switch corrente
+		     $1 = (t_cond_statement *)malloc(sizeof(t_cond_statement));
+		   
+		     $1->label_next = newLabel(program);
+		     $1->label_end = newLabel(program);
+		     condStack = addFirst(condStack, $1); 
+      }
+      cond_block RBRACE
+		  {  
+		     assignLabel(program,$1->label_end);
+		     condStack = removeFirst(condStack);
+		  }
+		  ;
+
+cond_block:  case_statements
+	      { }
+	    |  case_statements default_statement
+	      { }
+	    ;
+		
+
+case_statements: case_statements case_statement
+	       | case_statement
+	       ;
+
+case_statement: CASE exp COLON 
+                {
+	                 if ($2.expression_type == IMMEDIATE)
+                      gen_load_immediate(program, $2.value);
+                   else
+                      gen_andb_instruction(program, $2.value, $2.value, $2.value, CG_DIRECT_ALL);
+
+                   t_axe_label* l = newLabel(program);
+                   ((t_cond_statement *)LDATA(getElementAt(condStack,0)))->label_next = l;
+                   gen_beq_instruction (program, l, 0);
+		            }
+		            statements
+                {
+										gen_bt_instruction(program, ((t_cond_statement *)LDATA(getElementAt(condStack,0)))->label_end, 0);
+										assignLabel(program, ((t_cond_statement *)LDATA(getElementAt(condStack,0)))->label_next);
+                }
+;
+
+default_statement: DEFAULT COLON 
+		{ 
+		}
+		statements
+		 ;
+
+
+
 return_statement : RETURN
             {
                /* insert an HALT instruction */
diff -Naur acse_1.1.0/acse/axe_struct.h acse_1.1.0_cond/acse/axe_struct.h
--- acse_1.1.0/acse/axe_struct.h	2008-11-21 12:47:02.000000000 +0100
+++ acse_1.1.0_cond/acse/axe_struct.h	2014-09-15 22:22:39.000000000 +0200
@@ -114,6 +114,16 @@
                                     * that follows the while construct */
 } t_while_statement;
 
+
+typedef struct t_cond_statement
+{
+    t_axe_label *label_next; 
+    t_axe_label *label_end;
+} t_cond_statement;
+
+
+
+
 /* create a label */
 extern t_axe_label * alloc_label(int value);
 
diff -Naur acse_1.1.0/acse/Makefile~ acse_1.1.0_cond/acse/Makefile~
--- acse_1.1.0/acse/Makefile~	1970-01-01 01:00:00.000000000 +0100
+++ acse_1.1.0_cond/acse/Makefile~	2014-09-15 22:56:21.000000000 +0200
@@ -0,0 +1,25 @@
+project = ../bin/acse
+objects = Acse.tab.c lex.yy.c
+hfiles = $(wildcard *.h)
+cfiles = $(filter-out $(objects), $(wildcard *.c))
+
+.PHONY: all clean
+
+all: $(project)
+
+$(project) : $(objects) $(cfiles) $(hfiles)
+	gcc -o $@ $(objects) $(cfiles)
+
+Acse.tab.c : Acse.y
+	bison -d -r all $<
+
+lex.yy.c : Acse.lex Acse.tab.h
+	flex $<
+
+clean :
+	rm -f Acse.tab.c Acse.tab.h lex.yy.c $(project) $(project:=.exe)
+
+# This rule keeps Make happy, while the %.tab.h file is generated by
+#  the bison rule above
+%.tab.h: %.tab.c
+	if [ -a $@ ]; then touch $@; else false; fi
diff -Naur acse_1.1.0/tests/cond/cond1.src acse_1.1.0_cond/tests/cond/cond1.src
--- acse_1.1.0/tests/cond/cond1.src	1970-01-01 01:00:00.000000000 +0100
+++ acse_1.1.0_cond/tests/cond/cond1.src	2014-09-15 23:15:12.000000000 +0200
@@ -0,0 +1,13 @@
+int x,y;
+
+read(x);
+read(y);
+
+cond {
+  case x: y=1;
+  case y+1: x=0; y=0;
+  default: x=10; y=10;
+}
+
+write(x);
+write(y);
diff -Naur acse_1.1.0/tests/cond/cond2.src acse_1.1.0_cond/tests/cond/cond2.src
--- acse_1.1.0/tests/cond/cond2.src	1970-01-01 01:00:00.000000000 +0100
+++ acse_1.1.0_cond/tests/cond/cond2.src	2014-09-17 10:28:57.294375538 +0200
@@ -0,0 +1,14 @@
+int x,y;
+
+read(x);
+
+
+cond {
+  case x>0: y=1;
+  case x+1: x=0; y=0;
+  default: x=10; y=10;
+}
+
+
+write(x);
+write(y);
diff -Naur acse_1.1.0/tests/cond/cond2.src~ acse_1.1.0_cond/tests/cond/cond2.src~
--- acse_1.1.0/tests/cond/cond2.src~	1970-01-01 01:00:00.000000000 +0100
+++ acse_1.1.0_cond/tests/cond/cond2.src~	2014-09-16 16:23:43.584050803 +0200
@@ -0,0 +1,14 @@
+int x,y;
+
+read(x);
+
+
+cond {
+  case x>0: y=1;
+  case x+1: x=0; y=0;
+  default: x=10; y=10;
+}
+
+write(3*-2|1);
+write(x);
+write(y);
diff -Naur acse_1.1.0/tests/cond/tree.src~ acse_1.1.0_cond/tests/cond/tree.src~
--- acse_1.1.0/tests/cond/tree.src~	1970-01-01 01:00:00.000000000 +0100
+++ acse_1.1.0_cond/tests/cond/tree.src~	2014-09-17 10:29:45.926613290 +0200
@@ -0,0 +1,5 @@
+int x;
+
+read(x);
+
+write(x*-(2|1));
